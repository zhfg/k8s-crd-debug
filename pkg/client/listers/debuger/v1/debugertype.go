/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/zhfg/k8s-crd-debug/pkg/apis/debuger/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DebugerTypeLister helps list DebugerTypes.
type DebugerTypeLister interface {
	// List lists all DebugerTypes in the indexer.
	List(selector labels.Selector) (ret []*v1.DebugerType, err error)
	// DebugerTypes returns an object that can list and get DebugerTypes.
	DebugerTypes(namespace string) DebugerTypeNamespaceLister
	DebugerTypeListerExpansion
}

// debugerTypeLister implements the DebugerTypeLister interface.
type debugerTypeLister struct {
	indexer cache.Indexer
}

// NewDebugerTypeLister returns a new DebugerTypeLister.
func NewDebugerTypeLister(indexer cache.Indexer) DebugerTypeLister {
	return &debugerTypeLister{indexer: indexer}
}

// List lists all DebugerTypes in the indexer.
func (s *debugerTypeLister) List(selector labels.Selector) (ret []*v1.DebugerType, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DebugerType))
	})
	return ret, err
}

// DebugerTypes returns an object that can list and get DebugerTypes.
func (s *debugerTypeLister) DebugerTypes(namespace string) DebugerTypeNamespaceLister {
	return debugerTypeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DebugerTypeNamespaceLister helps list and get DebugerTypes.
type DebugerTypeNamespaceLister interface {
	// List lists all DebugerTypes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.DebugerType, err error)
	// Get retrieves the DebugerType from the indexer for a given namespace and name.
	Get(name string) (*v1.DebugerType, error)
	DebugerTypeNamespaceListerExpansion
}

// debugerTypeNamespaceLister implements the DebugerTypeNamespaceLister
// interface.
type debugerTypeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DebugerTypes in the indexer for a given namespace.
func (s debugerTypeNamespaceLister) List(selector labels.Selector) (ret []*v1.DebugerType, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DebugerType))
	})
	return ret, err
}

// Get retrieves the DebugerType from the indexer for a given namespace and name.
func (s debugerTypeNamespaceLister) Get(name string) (*v1.DebugerType, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("debugertype"), name)
	}
	return obj.(*v1.DebugerType), nil
}
